// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4919.Robot_2017;

import org.usfirst.frc4919.Robot_2017.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4919.Robot_2017.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton winch;
    public JoystickButton joystickPistonOpenButton;
    public JoystickButton joystickPistonCloseButton;
    public JoystickButton joystickGearRetractor;
    public JoystickButton joystickGearPusherButton;
    public JoystickButton winchGo;
    public JoystickButton winchStop;
    public Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        
        winchStop = new JoystickButton(joystick1, 1);
        winchStop.whileHeld(new WinchetStop());
        winchGo = new JoystickButton(joystick1, 1);
        winchGo.whileHeld(new WinchetGo());
        joystickGearPusherButton = new JoystickButton(joystick1, 1);
        joystickGearPusherButton.whileHeld(new GearPusherThingy());
        joystickGearRetractor = new JoystickButton(joystick1, 1);
        joystickGearRetractor.whileHeld(new GearRetractor());
        joystickPistonCloseButton = new JoystickButton(joystick1, 1);
        joystickPistonCloseButton.whileHeld(new PistonClose());
        joystickPistonOpenButton = new JoystickButton(joystick1, 1);
        joystickPistonOpenButton.whileHeld(new PistonOpen());
        winch = new JoystickButton(joystick1, 1);
        winch.whileHeld(new Winchet());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Piston Close", new PistonClose());
        SmartDashboard.putData("Piston Open", new PistonOpen());
        SmartDashboard.putData("Gear Pusher Thingy", new GearPusherThingy());
        SmartDashboard.putData("Gear Retractor", new GearRetractor());
        SmartDashboard.putData("Winchet", new Winchet());
        SmartDashboard.putData("Camera Turner", new CameraTurner());
        SmartDashboard.putData("Forward", new Forward());
        SmartDashboard.putData("Reverse", new Reverse());
        SmartDashboard.putData("Left", new Left());
        SmartDashboard.putData("Right", new Right());
        SmartDashboard.putData("Winchet Go", new WinchetGo());
        SmartDashboard.putData("Winchet Stop", new WinchetStop());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

